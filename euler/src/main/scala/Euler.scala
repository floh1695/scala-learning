package euler

private object ListToOption {
  def calculate[A](list: List[A]): Option[A] =
    if (list.length > 0) Some(list.head)
    else None
}

private object Prime {
  def isPrime(n: Int): Boolean = {
    def go(current: Int): Boolean =
      if (current <= 1) true
      else if (n != current && n % current == 0) false
      else go(current - 1)

    if (n < 2) false
    else go(Math.sqrt(n).ceil.toInt)
  }
}

sealed class EulerProblem(
  _number: Int,
  _solution: () => Any,
  _title: String,
  _details: String,
  _solved: Boolean
) {
  def number: Int = _number
  def answer(): String = _solution().toString()
  def title: String = _title
  def details: String = _details
  def solved: Boolean = _solved

  override def toString(): String = s"$number\t: $answer"
  def toReportString(): String =
    s"""problem: $number
       |title: $title
       |details:
       |$details
       |answer: $answer""".stripMargin
}

object Euler {
  def problem(number: Int): Option[EulerProblem] =
    ListToOption.calculate(
      problems().filter(p => p.number == number)
    )

  def problems(): List[EulerProblem] =
  List(
    new EulerProblem(
      1,
      () => {
        @annotation.tailrec
        def go(n: Int, sum: Int): Int =
          if (n < 1000)
            go(
              n + 1,
              if (n % 3 == 0 || n % 5 == 0) sum + n
              else sum
            )
          else sum 

        go(0, 0)
      },
      "Multiples of 3 or 5",
      """If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        |
        |Find the sum of all the multiples of 3 or 5 below 1000."""
        .stripMargin,
      true
    ),
    new EulerProblem(
      2,
      () => {
        def go(current: Int, last: Int, sum: Int): Int = {
          val next = () => current + last
          if (current > 4000000) sum
          else if (current % 2 == 0) go(next(), current, sum + current)
          else go(next(), current, sum)
        }
    
        go(1, 0, 0)
      },
      "Even Fibonacci numbers",
      """Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        |
        |  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        |
        |By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."""
        .stripMargin,
      true
    ),
    new EulerProblem(
      3,
      () => problem0003,
      "Largest prime factor",
      """The prime factors of 13195 are 5, 7, 13 and 29.
        |
        |What is the largest prime factor of the number 600851475143 ?"""
        .stripMargin,
      false
    ),
    new EulerProblem(
      4,
      () => problem0004,
      "Largest palindrome product",
      """A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
        |
        |Find the largest palindrome made from the product of two 3-digit numbers."""
        .stripMargin,
      false
    ),
    new EulerProblem(
      5,
      () => problem0005,
      "Smallest multiple",
      """2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        |
        |What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"""
        .stripMargin,
      false
    ),
    new EulerProblem(
      6,
      () => problem0006,
      "Sum square difference",
      """The sum of the squares of the first ten natural numbers is,
        |
        |  1**2 + 2**2 + ... + 10**2  =  385
        |
        |The square of the sum of the first ten natural numbers is,
        |
        |  (1 + 2 + ... + 10)**2  =  55**2  =  3025
        |
        |Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640 .
        |
        |Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."""
        .stripMargin,
      false
    ),
    new EulerProblem(
      7,
      () => problem0007,
      "10001st prime",
      """By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        |
        |What is the 10 001st prime number?"""
        .stripMargin,
      false
    ),
    new EulerProblem(
      8,
      () => problem0008,
      "Largest product in a series",
      """The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.
        |
        |  73167176531330624919225119674426574742355349194934
        |  96983520312774506326239578318016984801869478851843
        |  85861560789112949495459501737958331952853208805511
        |  12540698747158523863050715693290963295227443043557
        |  66896648950445244523161731856403098711121722383113
        |  62229893423380308135336276614282806444486645238749
        |  30358907296290491560440772390713810515859307960866
        |  70172427121883998797908792274921901699720888093776
        |  65727333001053367881220235421809751254540594752243
        |  52584907711670556013604839586446706324415722155397
        |  53697817977846174064955149290862569321978468622482
        |  83972241375657056057490261407972968652414535100474
        |  82166370484403199890008895243450658541227588666881
        |  16427171479924442928230863465674813919123162824586
        |  17866458359124566529476545682848912883142607690042
        |  24219022671055626321111109370544217506941658960408
        |  07198403850962455444362981230987879927244284909188
        |  84580156166097919133875499200524063689912560717606
        |  05886116467109405077541002256983155200055935729725
        |  71636269561882670428252483600823257530420752963450
        |
        |Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"""
        .stripMargin,
      false
    ),
    new EulerProblem(
      9,
      () => problem0009,
      "Special Pythagorean triplet",
      """A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
        |
        |  a2 + b2 = c2
        | 
        |For example, 32 + 42 = 9 + 16 = 25 = 52.
        |
        |There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        |Find the product abc."""
        .stripMargin,
      false
    ),
    new EulerProblem(
      10,
      () => problem0010,
      "Summation of primes",
      """The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        |
        |Find the sum of all the primes below two million."""
        .stripMargin,
      false
    ),
  )
}
